{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import {\n  ComputedFields,\n  defineDocumentType,\n  makeSource,\n} from \"contentlayer/source-files\";\nimport { rehypeAccessibleEmojis } from \"rehype-accessible-emojis\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport rehypeCodeTitles from \"rehype-code-titles\";\nimport rehypePrism from \"rehype-prism-plus\";\nimport rehypeSlug from \"rehype-slug\";\nimport GithubSlugger from \"github-slugger\";\n\nconst getSlug = (doc: any) => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\");\n\nconst journalComputedFields: ComputedFields = {\n  slug: {\n    type: \"string\",\n    resolve: (doc) => getSlug(doc),\n  },\n  image: {\n    type: \"string\",\n    resolve: (doc) => `/journals/${getSlug(doc)}/image.png`,\n  },\n  og: {\n    type: \"string\",\n    resolve: (doc) => `/journals/${getSlug(doc)}/og.jpg`,\n  },\n  headings: {\n    type: \"json\",\n    resolve: async (doc) => {\n      const slugger = new GithubSlugger();\n\n      // https://stackoverflow.com/a/70802303\n      const regex = /\\n\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\n\n      const headings = Array.from(doc.body.raw.matchAll(regex)).map(\n        // @ts-ignore\n        ({ groups }) => {\n          const flag = groups?.flag;\n          const content = groups?.content;\n          return {\n            heading: flag?.length,\n            text: content,\n            slug: content ? slugger.slug(content) : undefined,\n          };\n        }\n      );\n\n      return headings;\n    },\n  },\n};\n\nexport const Journal = defineDocumentType(() => ({\n  name: \"Journal\",\n  filePathPattern: `journals/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the post\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n      description: \"The description of the post\",\n      required: true,\n    },\n    category: {\n      type: \"string\",\n      description: \"The category of the post\",\n      required: true,\n    },\n    date: {\n      type: \"date\",\n      description: \"The date of the post\",\n      required: true,\n    },\n    author: {\n      type: \"string\",\n      description: \"The author of the post\",\n      required: true,\n    },\n    tags: {\n      type: \"json\",\n      description: \"Related concepts to the post\",\n      required: true,\n    },\n    draft: {\n      type: \"boolean\",\n      description: \"Determines if the post has been published\",\n      required: true,\n    },\n    toc: {\n      type: \"boolean\",\n      required: false,\n      default: false,\n    },\n  },\n  computedFields: journalComputedFields,\n}));\n\nconst snippetComputedFields: ComputedFields = {\n  slug: {\n    type: \"string\",\n    resolve: (doc) => getSlug(doc),\n  },\n};\n\nexport const Snippet = defineDocumentType(() => ({\n  name: \"Snippet\",\n  filePathPattern: `snippets/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the post\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n      description: \"The description of the post\",\n      required: true,\n    },\n    language: {\n      type: \"string\",\n      description: \"The title of the post\",\n      required: true,\n    },\n    category: {\n      type: \"string\",\n      description: \"The category of the post\",\n      required: true,\n    },\n    date: {\n      type: \"date\",\n      description: \"The date of the post\",\n      required: true,\n    },\n    draft: {\n      type: \"boolean\",\n      description: \"Determines if the post has been published\",\n      required: true,\n    },\n  },\n  computedFields: snippetComputedFields,\n}));\n\nexport default makeSource({\n  contentDirPath: \"data\",\n  documentTypes: [Journal, Snippet],\n  mdx: {\n    rehypePlugins: [\n      rehypeSlug,\n      rehypeCodeTitles,\n      rehypePrism,\n      rehypeAccessibleEmojis,\n      [\n        rehypeAutolinkHeadings,\n        {\n          behavior: \"wrap\",\n          properties: {\n            className: [\"anchor\"],\n          },\n        },\n      ],\n    ],\n  },\n});\n"],
  "mappings": "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",
  "names": []
}
