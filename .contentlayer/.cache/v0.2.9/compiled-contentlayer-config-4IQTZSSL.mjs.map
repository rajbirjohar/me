{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import {\n  ComputedFields,\n  defineDocumentType,\n  makeSource,\n} from \"contentlayer/source-files\";\n\nconst getSlug = (doc: any) => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\");\n\nconst postComputedFields: ComputedFields = {\n  slug: {\n    type: \"string\",\n    resolve: (doc) => getSlug(doc),\n  },\n  image: {\n    type: \"string\",\n    resolve: (doc) => `/chapter/${getSlug(doc)}/image.png`,\n  },\n  og: {\n    type: \"string\",\n    resolve: (doc) => `/chapter/${getSlug(doc)}/og.jpg`,\n  },\n};\n\nexport const Chapter = defineDocumentType(() => ({\n  name: \"Chapter\",\n  filePathPattern: `chapters/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the post\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n      description: \"The description of the post\",\n      required: true,\n    },\n    category: {\n      type: \"string\",\n      description: \"The category of the post\",\n      required: true,\n    },\n    date: {\n      type: \"date\",\n      description: \"The date of the post\",\n      required: true,\n    },\n    author: {\n      type: \"string\",\n      description: \"The author of the post\",\n      required: true,\n    },\n    tags: {\n      type: \"json\",\n      description: \"Related concepts to the post\",\n      required: true,\n    },\n    draft: {\n      type: \"boolean\",\n      description: \"Determines if the post has been published\",\n      required: true,\n    },\n  },\n  computedFields: postComputedFields,\n  // computedFields: {\n  //   slug: {\n  //     type: \"string\",\n  //     resolve: (chapter) => `${chapter._raw.flattenedPath}`,\n  //   },\n  //   url: {\n  //     type: \"string\",\n  //     resolve: (chapter) => `${chapter._raw.flattenedPath}`,\n  //   },\n  // },\n}));\n\nconst snippetComputedFields: ComputedFields = {\n  slug: {\n    type: \"string\",\n    resolve: (doc) => getSlug(doc),\n  },\n};\n\nexport const Snippet = defineDocumentType(() => ({\n  name: \"Snippet\",\n  filePathPattern: `snippets/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the post\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n      description: \"The description of the post\",\n      required: true,\n    },\n    language: {\n      type: \"string\",\n      description: \"The title of the post\",\n      required: true,\n    },\n    category: {\n      type: \"string\",\n      description: \"The category of the post\",\n      required: true,\n    },\n    date: {\n      type: \"date\",\n      description: \"The date of the post\",\n      required: true,\n    },\n    draft: {\n      type: \"boolean\",\n      description: \"Determines if the post has been published\",\n      required: true,\n    },\n  },\n  computedFields: snippetComputedFields,\n  // computedFields: {\n  //   slug: {\n  //     type: \"string\",\n  //     resolve: (snippet) => `${snippet._raw.flattenedPath}`,\n  //   },\n  //   url: {\n  //     type: \"string\",\n  //     resolve: (snippet) => `/${snippet._raw.flattenedPath}`,\n  //   },\n  // },\n}));\n\nexport default makeSource({\n  contentDirPath: \"data\",\n  documentTypes: [Chapter, Snippet],\n});\n"],
  "mappings": ";AAAA;AAAA,EAEE;AAAA,EACA;AAAA,OACK;AAEP,IAAM,UAAU,CAAC,QAAa,IAAI,KAAK,eAAe,QAAQ,UAAU,EAAE;AAE1E,IAAM,qBAAqC;AAAA,EACzC,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,QAAQ,GAAG;AAAA,EAC/B;AAAA,EACA,OAAO;AAAA,IACL,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,YAAY,QAAQ,GAAG;AAAA,EAC3C;AAAA,EACA,IAAI;AAAA,IACF,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,YAAY,QAAQ,GAAG;AAAA,EAC3C;AACF;AAEO,IAAM,UAAU,mBAAmB,OAAO;AAAA,EAC/C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAWlB,EAAE;AAEF,IAAM,wBAAwC;AAAA,EAC5C,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,QAAQ,GAAG;AAAA,EAC/B;AACF;AAEO,IAAM,UAAU,mBAAmB,OAAO;AAAA,EAC/C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAWlB,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,SAAS,OAAO;AAClC,CAAC;",
  "names": []
}
